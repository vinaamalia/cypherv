// ======================= arti tiap klausa ====================================================================
// DETACH : melepaskan atau mencabut suatu objek atau entitas dari sesuatu yang terhubung atau terikat dengannya
// FOREACH :  melakukan beberapa perubahan atau operasi pada beberapa simpul atau hubungan berdasarkan hasil kueri sebelumnya.
// UNION : menggabungkan dan menghapus duplikat dari hasil-hasil kueri yang berbeda, sehingga hanya hasil unik yang akan disertakan dalam hasil akhir.
// UNWIND : klausa yang digunakan untuk "memecah" atau "mengurai" koleksi (seperti array atau himpunan) menjadi baris-baris terpisah dalam hasil kueri
// YIELD : mengekstrak dan menampilkan hasil spesifik dari kueri yang lebih kompleks dan memberikan output yang lebih terperinci.
// ASSERT : pemeriksaan internal dalam program guna memastikan bahwa kondisi yang dianggap benar selama pengembangan berlaku saat menjalankan program.
// EXISTS : memeriksa apakah suatu pola atau hasil kueri menghasilkan setidaknya satu hasil atau tidak. Fungsi ini mengembalikan nilai boolean true jika hasil kueri tidak kosong (menghasilkan setidaknya satu baris), dan false jika hasil kueri kosong (tidak menghasilkan baris apa pun).
//          Fungsi EXISTS sering digunakan dalam klausa WHERE atau kondisi lain dalam kueri untuk memeriksa keberadaan simpul atau hubungan yang sesuai dengan kriteria tertentu. Hal ini berguna untuk menghindari pengecualian atau hasil yang tidak diinginkan saat mencari data dalam graf yang mungkin tidak ada.
// CONTAINS : memeriksa apakah suatu nilai atau elemen terkandung dalam sebuah koleksi, seperti array atau string. Fungsi CONTAINS mengembalikan nilai boolean true jika nilai atau elemen yang dicari terdapat dalam koleksi, dan false jika tidak.
// DISTINCTS : klausa yang digunakan untuk menghilangkan duplikat dari hasil kueri.
// CONSTRAINT : contoh NOT NULL constraint
// INDEX :  Anda dapat menggunakan pernyataan CREATE INDEX. Indeks digunakan untuk meningkatkan kinerja pencarian data dengan mempercepat proses pencarian dan pemfilteran.
// 


// count(*) mengembalikan jumlah baris yang diambil dalam kueri
MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
WHERE a.name = 'Tom Hanks'
RETURN a.name AS ActorName,
count(*) AS NumMovies

HASIL
╒═══════════╤═══════════╕
│"ActorName"│"NumMovies"│
╞═══════════╪═══════════╡
│"Tom Hanks"│38         │
└───────────┴───────────┘

MATCH (m:Movie)<-[:ACTED_IN]-(p:Person)
WHERE p.name = 'Charlie Chaplin' AND m.Runtime = 'Short'
RETURN COUNT(m) AS ShortMovieCount


╒═══════════════════╕
│ ShortMovieCount    │
╞═══════════════════╡
│         5         │
╘═══════════════════╛

//Using count() write a query to return the number of movies a person directed.

MATCH (d:Director)-[:DIRECTED]-(m)
RETURN d.name as Director,
COUNT (*) AS numMovies
ORDER BY numMovies  DESC LIMIT 5

Hasil
Director	       numMovies
"Woody Allen"	    42
"Alfred Hitchcock"	38
"Steven Spielberg"	30
"Clint Eastwood"	30
"Martin Scorsese"	30


PROFILE MATCH (a:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(d:Person)
RETURN a.name AS ActorName,
d.name AS DirectorName,
count(*) AS NumMovies, collect(m.title) AS Movies
ORDER BY NumMovies DESC

hasil 
╒════════════════╤════════════════╤═══════════╤══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╕
│"ActorName"     │"DirectorName"  │"NumMovies"│"Movies"                                                                                                                                          │
╞════════════════╪════════════════╪═══════════╪══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╡
│"Clint Eastwood"│"Clint Eastwood"│20         │["Bridges of Madison County, The","Perfect World, A","Unforgiven","Absolute Power","Pale Rider","Heartbreak Ridge","True Crime","High Plains Drift│
│                │                │           │er","Outlaw Josey Wales, The","Space Cowboys","Bronco Billy","Play Misty for Me","Gauntlet, The","Sudden Impact","Blood Work","Firefox","Honkytonk│
│                │                │           │ Man","Rookie, The","Million Dollar Baby","Gran Torino"]                                                                                          │
├────────────────┼────────────────┼───────────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│"Woody Allen"   │"Woody Allen"   │19         │["Mighty Aphrodite","Manhattan Murder Mystery","Sleeper","Bananas","Annie Hall","Manhattan","Take the Money and Run","Stardust Memories","Sweet an│
│                │                │           │d Lowdown","Small Time Crooks","Everything You Always Wanted to Know About Sex * But Were Afraid to Ask","Love and Death","Shadows and Fog","New Y│
│                │                │           │ork Stories","Curse of the Jade Scorpion, The","Husbands and Wives","Midsummer Night's Sex Comedy, A","Zelig","Broadway Danny Rose"]              │


// Using count() on property values

MATCH (p:Person)
RETURN count(p) , count(p.born)

╒══════════╤═══════════════╕
│"count(p)"│"count(p.born)"│
╞══════════╪═══════════════╡
│19047     │14103          │
└──────────┴───────────────┘

// ------> Counting for the next part of the query
 only return actors that have 2 movies

MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
WITH  a, count(*) AS NumMovies
// can add Movies to also create the list of movies
//, collect(m.title) AS Movies
WHERE NumMovies = 2
RETURN a.name AS Actor

// 
MATCH (p:Person {name: 'Elvis Presley'})-[]-(m:Movie)-[]-(a:Actor)
RETURN count(*), count(m), count (a)
hasil 
╒══════════╤══════════╤═══════════╕
│"count(*)"│"count(m)"│"count (a)"│
╞══════════╪══════════╪═══════════╡
│34        │34        │34         │
└──────────┴──────────┴───────────┘
// with distinct so it cant be a duplicate data
MATCH (p:Person {name: 'Elvis Presley'})-[]-(m:Movie)-[]-(a:Actor)
RETURN count(*), count(DISTINCT m), count (DISTINCT a)

Hasil
│"count(*)"│"count(DISTINCT m)"│"count (DISTINCT a)"│
╞══════════╪═══════════════════╪════════════════════╡
│34        │11                 │33                  │
└──────────┴───────────────────┴────────────────────┘


================================================================================================================================

================================================================================================================================

//=========================================================== CYPHER Agregation
// collect ALL NODE using PATTERN COMPREHENSION for  enables you to create a list based upon values obtained during a query. 
PROFILE
MATCH(m:Movie)
WHERE m.year = 2015
OPTIONAL MATCH (a:Person)-[:ACTED_IN]-(m)
WITH m, collect(DISTINCT a.name) AS Actors
OPTIONAL MATCH (m)-[:DIRECTED]-(d:Person)
RETURN m.title AS Movie, Actors, collect (DISTINCT d.name) AS Directors LIMIT 2

Hasil
│"Movie"                       │"Actors"                      │"Directors"                   │
╞══════════════════════════════╪══════════════════════════════╪══════════════════════════════╡
│"Mission: Impossible - Rogue N│["Simon Pegg","Tom Cruise","Je│["Christopher McQuarrie"]     │
│ation"                        │remy Renner","Rebecca Ferguson│                              │
│                              │"]                            │                              │
├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
│"Jupiter Ascending"           │["Mila Kunis","Eddie Redmayne"│[" Lilly Wachowski","Lana Wach│
│                              │,"Sean Bean","Channing Tatum"]│owski"]                       │
└──────────────────────────────┴──────────────────────────────┴──────────────────────────────┘
// Using Cypher’s pattern comprehension syntax: [<pattern> | value], we dynamically return a list using values obtained from the pattern. 
// In some cases, pattern comprehension performs better than using collect() because it uses a subquery
// Similar to OPTIONALMATCH
// don’t need to have a collect() stage and you avoid potential cartesian products.

PROFILE
MATCH (m:Movie)
WHERE m.year = 2015
RETURN m.title AS Movie,
[(dir:Person)-[:DIRECTED]->(m) | dir.name] AS Directors,
[(actor:Person)-[:ACTED_IN]->(m) | actor.name] AS Actors LIMIT 2

HASIL
│"Movie"              │"Directors"          │"Actors"             │
╞═════════════════════╪═════════════════════╪═════════════════════╡
│"Mission: Impossible │["Christopher McQuarr│["Simon Pegg","Tom Cr│
│- Rogue Nation"      │ie"]                 │uise","Jeremy Renner"│
│                     │                     │,"Rebecca Ferguson"] │
├─────────────────────┼─────────────────────┼─────────────────────┤
│"Jupiter Ascending"  │[" Lilly Wachowski","│["Mila Kunis","Eddie │
│                     │Lana Wachowski"]     │Redmayne","Sean Bean"│
│                     │                     │,"Channing Tatum"]   │

// Filtering during pattern comprehension
MATCH (a:Person {name: 'Tom Hanks'})
RETURN [(a)--(b:Movie)
WHERE b.title CONTAINS "Toy" | b.title ]
AS Movies

HASIL
"Movies"                                                       │
╞═══════════════════════════════════════════════════════════════╡
│["Toy Story of Terror","Toy Story 3","Toy Story 2","Toy Story"]│
└───────────────────────────────────────────────────────────────┘
// Adding more context to the list returned
MATCH (a:Person {name: 'Tom Hanks'})
RETURN [(a)--(b:Movie)
WHERE b.title CONTAINS "Toy" | b.title + ": " + b.year]
AS Movies

HASIL
╒══════════════════════════════════════════════════════════════════════╕
│"Movies"                                                              │
╞══════════════════════════════════════════════════════════════════════╡
│["Toy Story of Terror: 2013","Toy Story 3: 2010","Toy Story 2: 1999","│
│Toy Story: 1995"]                                                     │
└──────────────────────────────────────────────────────────────────────┘



================================================================================================================================

//Show some relationship
MATCH p=()-[r:UPLINK]->() RETURN p LIMIT 25

================================================================================================================================
================================================================================================================================

// inject traffic without java
// Assuming you have a Neo4j database running locally

// Define the traffic value
:param trafficValue => 'some_traffic_value'

// Run the Cypher query with the traffic parameter
MATCH (a:Traffic {type: $trafficValue})
RETURN a

// Here's a step-by-step guide on how to execute this query in the Neo4j Browser:

// Open the Neo4j Browser.
// In the query editor, copy and paste the complete query example provided above.
// Replace the value 'some_traffic_value' with the desired traffic value you want to use.
// Click the "Run" button or press Ctrl + Enter to execute the query.
// The query result will be displayed in the result panel.
// This example demonstrates how to execute the Cypher query directly in the Neo4j Browser, without relying on any specific programming language or client library. You can adjust the value of the trafficValue parameter as needed to match your specific scenario.


================================================================================================================================
// Using optional match
MATCH (n:Person {name: 'Neo'})
OPTIONAL MATCH (n)-[r]->(m {name: 'Alice'})
RETURN n, r, m

=============================================
count(*) is an aggregate expression.
MATCH (n:Label)-[r]->(m:Label)
RETURN count(*) AS nbr


MATCH (p:Person)
RETURN collect(p.age)
Result :
collect(p.age)
[58, 70, 55, 55, 71]

// with syntax is similar to RETURN
MATCH (user)-[:FRIEND]-(friend)
WHERE user.name = $name
WITH user, count(friend) AS friends
WHERE friends > 10
RETURN user

//Jalankan operasi mutasi untuk setiap elemen dalam daftar.
WITH ['Alice', 'Neo'] AS names
FOREACH ( value IN names | CREATE (:Person {name: value}) )


// show property keys 
MATCH (n) WHERE (n.relationships) IS NOT NULL 
RETURN DISTINCT "node" as entity, n.relationships AS relationships LIMIT 25 
UNION ALL 
MATCH ()-[r]-() WHERE (r.relationships) IS NOT NULL 
RETURN DISTINCT "relationship" AS entity, r.relationships AS relationships LIMIT 25


// menghapus node yang tidak ada relationship
MATCH (n)
WHERE NOT EXISTS((n)-[]-())
DELETE n    

// hapus yang tidak punya property born
MATCH (n)
WHERE n.born IS NULL
DELETE n

// hapus relatuonship person yang tidak punya property born <ini syarat untuk bisa menghapus node yang relationshipnya belum dihapus>
MATCH (n:Person)-[r]-()
WHERE n.born IS NULL 
DELETE r

// Update property relationship
MATCH ()-[r:WROTE]->()
WHERE type(r) = "WROTE"
SET r += { amount: 3 }
RETURN r

// inject traffic without java
// Assuming you have a Neo4j database running locally

// Define the traffic value
:param trafficValue => 'some_traffic_value'

// Run the Cypher query with the traffic parameter
MATCH (a:Traffic {type: $trafficValue})
RETURN a

// Here's a step-by-step guide on how to execute this query in the Neo4j Browser:

// Open the Neo4j Browser.
// In the query editor, copy and paste the complete query example provided above.
// Replace the value 'some_traffic_value' with the desired traffic value you want to use.
// Click the "Run" button or press Ctrl + Enter to execute the query.
// The query result will be displayed in the result panel.
// This example demonstrates how to execute the Cypher query directly in the Neo4j Browser, without relying on any specific programming language or client library. You can adjust the value of the trafficValue parameter as needed to match your specific scenario.


================================================================================================================================
// Using optional match
MATCH (n:Person {name: 'Neo'})
OPTIONAL MATCH (n)-[r]->(m {name: 'Alice'})
RETURN n, r, m

=============================================
count(*) is an aggregate expression.
MATCH (n:Label)-[r]->(m:Label)
RETURN count(*) AS nbr


MATCH (p:Person)
RETURN collect(p.age)
Result :
collect(p.age)
[58, 70, 55, 55, 71]

// with syntax is similar to RETURN
MATCH (user)-[:FRIEND]-(friend)
WHERE user.name = $name
WITH user, count(friend) AS friends
WHERE friends > 10
RETURN user

//Jalankan operasi mutasi untuk setiap elemen dalam daftar.
WITH ['Alice', 'Neo'] AS names
FOREACH ( value IN names | CREATE (:Person {name: value}) )


// show property keys 
MATCH (n) WHERE (n.relationships) IS NOT NULL 
RETURN DISTINCT "node" as entity, n.relationships AS relationships LIMIT 25 
UNION ALL 
MATCH ()-[r]-() WHERE (r.relationships) IS NOT NULL 
RETURN DISTINCT "relationship" AS entity, r.relationships AS relationships LIMIT 25


// menghapus node yang tidak ada relationship
MATCH (n)
WHERE NOT EXISTS((n)-[]-())
DELETE n    

// hapus yang tidak punya property born
MATCH (n)
WHERE n.born IS NULL
DELETE n

// hapus relatuonship person yang tidak punya property born <ini syarat untuk bisa menghapus node yang relationshipnya belum dihapus>
MATCH (n:Person)-[r]-()
WHERE n.born IS NULL 
DELETE r

// Update property relationship
MATCH ()-[r:WROTE]->()
WHERE type(r) = "WROTE"
SET r += { amount: 3 }
RETURN r

// calculate packet loss
MATCH (source)-[transmission]->(destination)
WHERE source.name = 'SourceDevice' AND destination.name = 'DestinationDevice'
WITH sum(transmission.packetCount) AS totalPackets
RETURN totalPackets

MATCH (source)-[transmission]->(destination)
WHERE EXISTS(transmission.totalPackets) AND EXISTS(transmission.receivedPackets)
WITH transmission, (transmission.totalPackets - transmission.receivedPackets) AS lostPackets
WITH transmission, lostPackets, (lostPackets / transmission.totalPackets) * 100 AS lossPercentage
RETURN transmission, lossPercentage

// CONTOH clause untuk IF else pada cypher
MATCH (n:Node)
RETURN n.name, 
CASE
  WHEN n.age < 18 THEN 'Minor'
  WHEN n.age >= 18 AND n.age < 65 THEN 'Adult'
  ELSE 'Senior'
END AS ageGroup



MATCH (t)-[r]->(nextNode)
RETURN
  CASE 
  WHEN t.load = $value AND r.capacity = $valuee THEN 0
  ELSE t.load END AS result,
  nextNode.property AS nextNodeProperty

// handle null values and replace them with a dynamically changing value
MATCH (n:Node)
RETURN n.property, COALESCE(n.nullableProperty, $dynamicValue) AS updatedProperty

// reset the properties to zero using a dynamic value,
MATCH (n:Node)
SET n.property = CASE
  WHEN n.nullableProperty IS NULL THEN $dynamicValue
  ELSE 0
END
RETURN n

// collect
MATCH (p:Person)
RETURN collect(p.age)

// hapus semua node yang punya relationship, kecuali node yang tidak ada relationship
MATCH (n)
WHERE size((n)-[]-()) > 0
WITH n
LIMIT 1
RETURN n
UNION
MATCH (n)
WHERE size((n)-[]-()) = 0
DETACH DELETE n


// RENAME the type of traffic
MATCH (n)-[oldRel:FOLLOWS]->(m)
CREATE (n)-[newRel:FRIEND_OF]->(m)
SET newRel = oldRel
DELETE oldRel

// APOC LOAD

// shortest path 
MATCH (start:Label {property: 'value1'}), (end:Label {property: 'value2'})
MATCH path = shortestPath((start)-[:RELATIONSHIP_TYPE*]-(end))
WITH path, relationships(path) AS rels
UNWIND rels AS rel
WITH rel, startNode(rel) AS startNode, endNode(rel) AS endNode
RETURN startNode.property AS StartNodeProperty, rel.property AS RelationshipProperty, endNode.property AS EndNodeProperty

  // contoh 
MATCH (start:Movie {title: 'Unforgiven'}), (end:Movie {title: 'The Da Vinci Code'})
MATCH path = shortestPath((start)-[:FRIEND_OF*]-(end))
WITH path, relationships(path) AS FriendOf
UNWIND FriendOf AS rel
WITH rel, startNode(rel) AS startNode, endNode(rel) AS endNode
RETURN startNode.title AS StartNodeProperty, rel.amount AS RelationshipProperty, endNode.title AS EndNodeProperty

// membuat tabel mukti path
MATCH (start:Label {property: 'value1'}), (end:Label {property: 'value2'})
MATCH path = (start)-[:RELATIONSHIP_TYPE*]-(end)
WITH collect(path) AS paths
UNWIND paths AS path
WITH path, relationships(path) AS rels
UNWIND rels AS rel
WITH rel, startNode(rel) AS startNode, endNode(rel) AS endNode
RETURN startNode.property AS StartNodeProperty, rel.property AS RelationshipProperty, endNode.property AS EndNodeProperty

MATCH (start:Movie {title: 'Unforgiven'}), (end:Movie {title: 'The Da Vinci Code'})
MATCH paths = (start)-[:FRIEND_OF*]-(end)
UNWIND relationships(paths) AS rel
WITH rel, startNode(rel) AS startNode, endNode(rel) AS endNode
RETURN startNode.title AS StartNodeTitle, rel.type AS RelationshipType, endNode.title AS EndNodeTitle

// to make the value is not null
MATCH (start:Movie {title: 'Unforgiven'}), (end:Movie {title: 'The Da Vinci Code'})
MATCH paths = (start)-[:FRIEND_OF*]-(end)
UNWIND relationships(paths) AS rel
WITH rel, startNode(rel) AS startNode, endNode(rel) AS endNode
RETURN startNode.title AS StartNodeTitle, rel.type AS RelationshipType, endNode.title AS EndNodeTitle,
       COALESCE(rel.property, '') AS RelationshipProperty,
       COALESCE(startNode.property, '') AS StartNodeProperty,
       COALESCE(endNode.property, '') AS EndNodeProperty

// Merge bikin relation di node yang sudah ada
MATCH (node1:Label1 {property1: 'value1'}), (node2:Label2 {property2: 'value2'})
MERGE (node1)-[:RELATIONSHIP_TYPE]->(node2)


